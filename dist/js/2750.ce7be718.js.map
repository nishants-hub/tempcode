{"version":3,"file":"js/2750.ce7be718.js","mappings":"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","sources":["webpack://construction-commercial-search-frontend/./src/components/Utility/CustomDropdowns/CompanySearch.vue","webpack://construction-commercial-search-frontend/src/components/Utility/CustomDropdowns/CompanySearch.vue","webpack://construction-commercial-search-frontend/./src/components/Utility/CustomDropdowns/CompanySearch.vue?d9d6","webpack://construction-commercial-search-frontend/./src/components/Utility/CustomDropdowns/CompanySearch.vue?8cc2"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"w-full\"},[(_vm.isMultiSelect && _vm.showSelectedList && _vm.companies?.length > 0)?_c('div',{staticClass:\"mb-spacing-250 flex w-full flex-wrap gap-spacing-150\"},_vm._l((_vm.companies),function(company){return _c('GeneralRemovableItem',{key:company?._id,attrs:{\"item-name\":company?.display_name},on:{\"on-item-removed\":function($event){return _vm.removeCompanyFromCompanies(company)}}})}),1):_vm._e(),_c('FormInput',{attrs:{\"label\":_vm.dropdownLabel,\"input-type\":'searchable-input',\"inputId\":_vm.dropdownId,\"prevent-v-model\":true,\"clear-button\":_vm.company ? true : false,\"suggestions\":_vm.getFilteredCompanySuggestions,\"vertical-padding\":_vm.verticalPadding,\"show-error\":_vm.showError,\"is-suggestions-fetching\":_vm.isCompanySuggestionsFetching},on:{\"set-suggestion\":_vm.handleSelect,\"reset-suggestions\":_vm.handleReset,\"fetch-suggestions\":_vm.fetchDebouncedCompanySuggestions,\"enter-pressed\":function($event){return _vm.$emit('enter-pressed')}},model:{value:(_vm.company),callback:function ($$v) {_vm.company=$$v},expression:\"company\"}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"w-full\">\r\n    <!-- Display selected companies in multi-select mode -->\r\n    <div\r\n      v-if=\"isMultiSelect && showSelectedList && companies?.length > 0\"\r\n      class=\"mb-spacing-250 flex w-full flex-wrap gap-spacing-150\"\r\n    >\r\n      <GeneralRemovableItem\r\n        v-for=\"company in companies\"\r\n        :key=\"company?._id\"\r\n        :item-name=\"company?.display_name\"\r\n        @on-item-removed=\"removeCompanyFromCompanies(company)\"\r\n      />\r\n    </div>\r\n\r\n    <!-- Form input for searching and selecting companies -->\r\n    <FormInput\r\n      v-model=\"company\"\r\n      :label=\"dropdownLabel\"\r\n      :input-type=\"'searchable-input'\"\r\n      :inputId=\"dropdownId\"\r\n      :prevent-v-model=\"true\"\r\n      :clear-button=\"company ? true : false\"\r\n      :suggestions=\"getFilteredCompanySuggestions\"\r\n      :vertical-padding=\"verticalPadding\"\r\n      :show-error=\"showError\"\r\n      :is-suggestions-fetching=\"isCompanySuggestionsFetching\"\r\n      @set-suggestion=\"handleSelect\"\r\n      @reset-suggestions=\"handleReset\"\r\n      @fetch-suggestions=\"fetchDebouncedCompanySuggestions\"\r\n      @enter-pressed=\"$emit('enter-pressed')\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { debounce } from \"lodash\";\r\nimport { mapActions } from \"vuex\";\r\n\r\nexport default {\r\n  components: {\r\n    GeneralRemovableItem: () =>\r\n      import(\"@/components/General/RemovableItem.vue\"),\r\n    FormInput: () => import(\"@/components/General/FormInput.vue\"),\r\n  },\r\n  props: {\r\n    companies: {\r\n      type: Array,\r\n      required: false,\r\n      default: () => [],\r\n    },\r\n    selectedCompany: {\r\n      type: Object,\r\n      required: false,\r\n      default: null,\r\n    },\r\n    dropdownLabel: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    dropdownId: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    isMultiSelect: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false,\r\n    },\r\n    showSelectedList: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true,\r\n    },\r\n    showError: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true,\r\n    },\r\n    verticalPadding: {\r\n      type: String,\r\n      required: false,\r\n    },\r\n    blackListed: {\r\n      type: Array,\r\n      required: false,\r\n      default: () => [],\r\n    },\r\n    allowCreateNew: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      company: this.selectedCompany?.display_name || \"\",\r\n      companySuggestions: [],\r\n      isCompanySuggestionsFetching: false,\r\n      fetchDebouncedCompanySuggestions: debounce(\r\n        this.fetchCompanySuggestions,\r\n        300,\r\n      ),\r\n    };\r\n  },\r\n  watch: {\r\n    selectedCompany() {\r\n      this.company = this.selectedCompany?.display_name;\r\n    },\r\n  },\r\n  computed: {\r\n    getFilteredCompanySuggestions() {\r\n      let output;\r\n      if (this.isMultiSelect) {\r\n        // Filter out companies already in the selected list\r\n        output = this.companySuggestions?.filter(\r\n          (suggestion) =>\r\n            !this.companies?.some(\r\n              (company) => company?._id === suggestion?._id,\r\n            ),\r\n        );\r\n      } else {\r\n        // Filter out the selected company if single select\r\n        output = this.companySuggestions?.filter(\r\n          (suggestion) => this.selectedCompany?._id !== suggestion?._id,\r\n        );\r\n      }\r\n      if (this.blackListed?.length > 0) {\r\n        output = output?.filter(\r\n          (suggestion) => !this.blackListed.includes(suggestion?._id),\r\n        );\r\n      }\r\n      return output;\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions(\"company\", [\"getCompanySuggestions\"]),\r\n    async fetchCompanySuggestions(query) {\r\n      if (query === \"\") {\r\n        this.companySuggestions = [];\r\n        return;\r\n      }\r\n      this.isCompanySuggestionsFetching = true;\r\n      const responseData = await this.getCompanySuggestions({\r\n        params: { searchTerm: query?.trim() },\r\n      });\r\n      let isPresent = false;\r\n      this.companySuggestions = responseData?.map((company) => {\r\n        if (\r\n          company?.name?.toLowerCase()?.trim() === query?.toLowerCase()?.trim()\r\n        ) {\r\n          isPresent = true;\r\n        }\r\n        return {\r\n          display_name: company?.name,\r\n          _id: company?.id,\r\n          is_html: false,\r\n        };\r\n      });\r\n      if (!isPresent && this.allowCreateNew) {\r\n        this.companySuggestions.unshift({\r\n          htmlContent: `Create: <span class=\"ml-spacing-50 bg-bg-neutral-default py-spacing-50 px-spacing-100 rounded-08\">${query}</span>`,\r\n          display_name: query?.trim(),\r\n          _id: query?.toLowerCase()?.trim(),\r\n          isNew: true,\r\n          is_html: true,\r\n        });\r\n      }\r\n      this.isCompanySuggestionsFetching = false;\r\n    },\r\n    handleReset(forceReset) {\r\n      if (!this.isMultiSelect || forceReset) {\r\n        this.companySuggestions = [];\r\n      }\r\n    },\r\n    handleSelect(company) {\r\n      if (this.isMultiSelect) {\r\n        this.addCompanyToCompanies(company);\r\n      } else {\r\n        this.selectCompany(company);\r\n      }\r\n    },\r\n    selectCompany(company) {\r\n      this.company = company?.display_name;\r\n      this.$emit(\"on-company-update\", company);\r\n    },\r\n    addCompanyToCompanies(company) {\r\n      let output = [...this.companies, company];\r\n      this.$emit(\"on-companies-update\", output);\r\n    },\r\n    removeCompanyFromCompanies(company) {\r\n      let output = this.companies.filter((item) => item?._id !== company?._id);\r\n      this.$emit(\"on-companies-update\", output);\r\n    },\r\n  },\r\n};\r\n</script>\r\n","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CompanySearch.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CompanySearch.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./CompanySearch.vue?vue&type=template&id=8ad13c12\"\nimport script from \"./CompanySearch.vue?vue&type=script&lang=js\"\nexport * from \"./CompanySearch.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","isMultiSelect","showSelectedList","companies","length","_l","company","key","_id","attrs","display_name","on","$event","removeCompanyFromCompanies","_e","dropdownLabel","dropdownId","getFilteredCompanySuggestions","verticalPadding","showError","isCompanySuggestionsFetching","handleSelect","handleReset","fetchDebouncedCompanySuggestions","$emit","model","value","callback","$$v","expression","staticRenderFns","components","GeneralRemovableItem","FormInput","props","type","Array","required","default","selectedCompany","Object","String","Boolean","blackListed","allowCreateNew","data","companySuggestions","debounce","fetchCompanySuggestions","watch","computed","output","filter","suggestion","some","includes","methods","mapActions","query","responseData","getCompanySuggestions","params","searchTerm","trim","isPresent","map","name","toLowerCase","id","is_html","unshift","htmlContent","isNew","forceReset","addCompanyToCompanies","selectCompany","item","component"],"sourceRoot":""}